// File: components/dashboard/CreateCourseButton.tsx
'use client'

import { createCourseAction } from '@/app/actions/courseActions'
import { Button } from '@/components/ui/button'
import {
	Dialog,
	DialogContent,
	DialogDescription,
	DialogFooter,
	DialogHeader,
	DialogTitle,
	DialogTrigger,
} from '@/components/ui/dialog'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { useUser } from '@clerk/nextjs'
import { Loader2, PlusCircle } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { useEffect, useState, useTransition } from 'react'
import ClientCategories from './ClientCategories'

interface Category {
	_id: string
	name: string
	slug: string
	color?: string
}

interface CreateCourseButtonProps {
	variant?:
		| 'default'
		| 'destructive'
		| 'outline'
		| 'secondary'
		| 'ghost'
		| 'link'
	size?: 'default' | 'sm' | 'lg' | 'icon'
	categories?: Category[]
}

export default function CreateCourseButton({
	variant = 'default',
	size = 'default',
	categories = [],
}: CreateCourseButtonProps) {
	const router = useRouter()
	const { user } = useUser()
	const [open, setOpen] = useState(false)
	const [isPending, startTransition] = useTransition()
	const [errors, setErrors] = useState<Record<string, string>>({})
	const [selectedCategory, setSelectedCategory] = useState<string>(
		categories[0]?.slug || ''
	)

	useEffect(() => {
		if (categories.length > 0 && !selectedCategory) {
			setSelectedCategory(categories[0].slug)
		}
	}, [categories, selectedCategory])

	const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
		e.preventDefault()
		const formData = new FormData(e.currentTarget)

		if (user?.id) {
			formData.append('userId', user.id)
		}

		const newErrors: Record<string, string> = {}
		const title = formData.get('title') as string
		const slug = formData.get('slug') as string
		const description = formData.get('description') as string
		const price = formData.get('price') as string

		// Add the selected category to the form data
		formData.set('category', selectedCategory)

		if (!title) newErrors.title = 'Title is required'
		if (!slug) newErrors.slug = 'Slug is required'
		if (!description) newErrors.description = 'Description is required'
		if (!selectedCategory) newErrors.category = 'Category is required'

		if (price && isNaN(Number(price))) {
			newErrors.price = 'Price must be a valid number'
		}

		if (Object.keys(newErrors).length > 0) {
			setErrors(newErrors)
			return
		}

		setErrors({})

		startTransition(async () => {
			try {
				const result = await createCourseAction(formData)
				if (result.success) {
					setOpen(false)
					router.push(`/creator-dashboard/courses/${result.courseId}/edit`)
					router.refresh()
				} else {
					setErrors({
						form: (result.error as string) || 'Failed to create course',
					})
				}
			} catch (error) {
				console.error('Error creating course:', error)
				setErrors({ form: 'An unexpected error occurred' })
			}
		})
	}

	const generateSlug = (title: string) => {
		return title
			.toLowerCase()
			.replace(/[^\w\s]/gi, '')
			.replace(/\s+/g, '-')
	}

	const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
		const titleInput = e.target
		const slugInput = document.getElementById('slug') as HTMLInputElement

		if (!slugInput.value || slugInput.dataset.autoGenerated === 'true') {
			slugInput.value = generateSlug(titleInput.value)
			slugInput.dataset.autoGenerated = 'true'
		}
	}

	return (
		<Dialog open={open} onOpenChange={setOpen}>
			<DialogTrigger asChild>
				<Button variant={variant} size={size}>
					<PlusCircle className='mr-2 h-4 w-4' />
					Create Course
				</Button>
			</DialogTrigger>
			<DialogContent className='sm:max-w-[600px]'>
				<DialogHeader>
					<DialogTitle>Create a New Course</DialogTitle>
					<DialogDescription>
						Fill in the basic details to create your course. You can add content
						later.
					</DialogDescription>
				</DialogHeader>
				<form onSubmit={handleSubmit} className='space-y-4 py-4'>
					{errors.form && (
						<div className='bg-red-50 text-red-600 p-3 rounded-md text-sm mb-4'>
							{errors.form}
						</div>
					)}

					<div className='space-y-2'>
						<Label htmlFor='title'>Course Title</Label>
						<Input
							id='title'
							name='title'
							placeholder='Introduction to Programming'
							onChange={handleTitleChange}
							className={errors.title ? 'border-red-500' : ''}
						/>
						{errors.title && (
							<p className='text-red-500 text-sm mt-1'>{errors.title}</p>
						)}
					</div>

					<div className='space-y-2'>
						<Label htmlFor='slug'>URL Slug</Label>
						<Input
							id='slug'
							name='slug'
							placeholder='introduction-to-programming'
							className={errors.slug ? 'border-red-500' : ''}
						/>
						{errors.slug && (
							<p className='text-red-500 text-sm mt-1'>{errors.slug}</p>
						)}
						<p className='text-xs text-muted-foreground'>
							This will be used in the URL: educetera.com/courses/[slug]
						</p>
					</div>

					<div className='space-y-2'>
						<Label htmlFor='description'>Description</Label>
						<Textarea
							id='description'
							name='description'
							placeholder='Tell potential students what your course is about'
							className={`resize-none min-h-[100px] ${errors.description ? 'border-red-500' : ''}`}
						/>
						{errors.description && (
							<p className='text-red-500 text-sm mt-1'>{errors.description}</p>
						)}
					</div>

					<div className='grid grid-cols-2 gap-4'>
						<div className='space-y-2'>
							<Label htmlFor='category'>Category</Label>
							<ClientCategories
								initialCategories={categories}
								selectedCategory={selectedCategory}
								onCategoryChange={setSelectedCategory}
								className={errors.category ? 'border-red-500' : ''}
							/>
							{errors.category && (
								<p className='text-red-500 text-sm mt-1'>{errors.category}</p>
							)}
						</div>

						<div className='space-y-2'>
							<Label htmlFor='price'>Price (USD)</Label>
							<Input
								id='price'
								name='price'
								type='number'
								min='0'
								step='0.01'
								placeholder='29.99'
								className={errors.price ? 'border-red-500' : ''}
							/>
							{errors.price && (
								<p className='text-red-500 text-sm mt-1'>{errors.price}</p>
							)}
							<p className='text-xs text-muted-foreground'>
								Set to 0 for a free course
							</p>
						</div>
					</div>

					<DialogFooter>
						<Button type='submit' disabled={isPending}>
							{isPending ? (
								<>
									<Loader2 className='mr-2 h-4 w-4 animate-spin' />
									Creating...
								</>
							) : (
								'Create Course'
							)}
						</Button>
					</DialogFooter>
				</form>
			</DialogContent>
		</Dialog>
	)
}
